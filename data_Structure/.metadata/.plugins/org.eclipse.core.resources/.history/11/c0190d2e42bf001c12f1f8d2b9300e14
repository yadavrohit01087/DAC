package heapSorting;

public class HeapSorting {
	
	public static void heap(int arr [])
	{
		int n=arr.length;  // node to start heapify =(n/2
		for(int i=(n/2)-1;i>=0;i--)//heapify complete array
		{
			heapify(arr,i);
		}
		
		for(int i=n-1;i>=0;i--)//swap 1st-last element for every node of array
		{
			int temp=arr[0];
			arr[0]=arr[n-1];
			arr[n-1]=temp;
			
			heapify(arr,i);
		}
	}
	
	
	
	public static void heapify(int arr [],int i)
	{
		int largest=i;
		int l=2*i+1;
		int r=2*i+2;
		
		if(l<arr.length && arr[l]>arr[i])
		{
			largest=l;
		}
		
		if(r<arr.length && arr[r]>arr[largest])
		{
			largest=r;
		}
		
		if(largest!=i)
		{
			int temp=arr[i];
			arr[i]=arr[largest];
			arr[largest]=temp;
			
			heapify(arr,largest);//heapify again swapped children node(largest) of i(node to heapify)
			                      //with its children if it has any
			
		}
	}
	

}
