package binarySearchTree;

public class BST {
	Node root;
	
	public BST()
	{
		this.root=null;
	}
	
	public void insert(int value)
	{
		Node tmp=new Node(value);
		if(root==null)
		{
			root=tmp;
		}
		else
		{
			Node itr=root;
			while(true)
			{
				if (value<itr.data)//smaller value to the left
				{
					if(itr.left==null)
					{
						itr.left=tmp;
						break;
					}
					else
						itr=itr.left;

				}			
				else if(value>itr.data)//large value to the right
				{
					if(itr.right==null)
					{
						itr.right=tmp;
						break;
					}
					else
						itr=itr.right;
				}
				else//duplicate values not allowed
					break;
			}
		}
	}
	
	public void preOrder()
	{
		printPreOrder(root);
		
	}

	public void printPreOrder(Node itr)
	{
		if(itr!=null)
		{
			System.out.print(itr.data+",");
			printPreOrder(itr.left);
			printPreOrder(itr.right);
		}
		System.out.println();
		
	}
	
	public void inOrder()
	{
		printInOrder(root);
		
	}

	public void printInOrder(Node itr)
	{
		if(itr!=null)
		{
			printInOrder(itr.left);
			System.out.print(itr.data+",");
			printInOrder(itr.right);
		}
		System.out.println();
		
	}
	
	public void postOrder()
	{
		printPostOrder(root);
	}

	public void printPostOrder(Node itr)
	{
		if(itr!=null)
		{
			printPostOrder(itr.left);
			printPostOrder(itr.right);
			System.out.print(itr.data+",");
			System.out.println();
		}
	}
}
