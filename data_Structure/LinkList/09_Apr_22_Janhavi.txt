employee.java

public class Employee{
  private int age;
  private float sal;
  private String name;
  
 public Employee()
 {
     age=0;
     sal=0.0f;
     name=null;
 }

 public Employee(String nm,int a,float s)
 {
     age=a;
     sal=s;
     name=nm;
 }


 void set_age(int a)
 {
   age=a;
 } 
 
 void set_sal(float s)
 {
   sal=s;
 }
 
 void set_name(String a)
 {
   name=a;
 }  

 int get_age()
 {
   return age;
 }

 float get_sal()
 {
   return sal;
 }

 String get_name()
 {
   return name;
 }


 public String to_String()
 {
    String str;
    str=name+"  " +age+"  "+sal;
    return str;
 }
}

  
____________________________________________________________
EmployeeNode.java

public class NodeEmp{
  private Employee data;
  private NodeEmp prev,next;

  NodeEmp() 
  {
     data=prev=next=null;
  }
 
  NodeEmp(Employee e)
  {
     data=e;
     prev=next=null;
  }

  void set_next(NodeEmp n)
  {
     next=n;
  }

  void set_prev(NodeEmp n)
  {
     prev=n;
  }

  void set_emp_data(Employee e)
  {
     data=e;
  }


  NodeEmp get_next()
  {
     return next;
  }

  NodeEmp get_prev()
  {
     return prev;
  }

  Employee get_emp_data()
  {
    return data;
  }

  public String to_String()
  {
     return data +" "; //Employee  sysout(Empo.toString())
  }
}


________________________________________________________

doublyEmpLL.java


public class doublyEmpLL{
 private NodeEmp head;
 private NodeEmp tail;

public doublyEmpLL() { head=null; tail=null; }


public void insert(Employee e)
{
   NodeEmp new_node=new NodeEmp(e);

   if(head==null && tail==null)
   {
      head=tail=new_node;
   }
   else
   {
      new_node.set_next(head);
      head.set_prev(new_node);
      head=new_node;
   }
}

public void append(Employee e)
{
  NodeEmp new_node=new NodeEmp(e);
  if(head==null && tail==null)
  {
     head=tail=new_node;
  }
  else
  {
     tail.set_next(new_node);
     new_node.set_prev(tail);
     tail=new_node;
  }
}
          

public void insert_at_pos(Employee e,int pos)
{
  NodeEmp new_node= new NodeEmp(e);
     
  if(pos==1) { insert(e); return; }

  NodeEmp it=head;
  
  for(i=1;i<pos-1;i++)
  {
     if(it.get_next()==null)  
     {
        break;
     }
     it=it.get_next();  
  }
  
  if(it!=tail)
  {
    new_node.set_next(it.get_next());  
    new_node.set_prev(it);
    it.set_next(new_node);
    new_node.get_next().set_prev(new_node); 
  }
  else
  {
    append(e);
  }
}


public void deleteOlderThan31Age()
{
   NodeEmp it=head;
   int i=1;
   while(it!=null)
   {
     if(it.get_data().get_age()>31)
     {
         delete_by_pos(i);
     }
     i=i+1;
     it=it.get_next();
     
   }//end of while
         
void delete_first







 











Question:

main()
{
	Employee e1 = new Employee("A", 34, 15500); //name, age & salary
	Employee e2 = new Employee("B", 31, 15600);
	Employee e3 = new Employee("C", 32, 15100);
	Employee e4 = new Employee("D", 30, 15200);
	Employee e5 = new Employee("E", 31, 15300);

	EmployeeDLL employeeList1 = new EmployeeDLL();
	employeeList1.insert(e1);
	employeeList1.append(e2);
	employeeList1.insertAtPos(e3,3);

	EmployeeDLL employeeList2 = new EmployeeDLL()
	employeeList1.append(e4);
	employeeList1.insert(e5);
	employeeList1.append("F", 31, 15900);

	System.out.println(employeeList1);
	System.out.println(employeeList2);

	employeeList1.append(employeeList2);
	employeeList1.deleteOlderThan31Age();
	EmployeeDLL.printCommonEmployees(employeeList1, employeeList2);

	EmployeeDLL employeeList3 = EmployeeDLL.concat(employeeList1, employeeList2);
	System.out.println(employeeList3)
}






